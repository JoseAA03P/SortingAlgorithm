import time 

class AVLNode:
    def __init__(self, key):
        self.key = key
        self.height = 1
        self.left = None
        self.right = None

def get_height(node):
    if not node:
        return 0
    return node.height

def update_height(node):
    if node:
        node.height = 1 + max(get_height(node.left), get_height(node.right))

def get_balance_factor(node):
    if not node:
        return 0
    return get_height(node.left) - get_height(node.right)

def rotate_right(y):
    x = y.left
    t2 = x.right

    x.right = y
    y.left = t2

    update_height(y)
    update_height(x)

    return x

def rotate_left(x):
    y = x.right
    t2 = y.left

    y.left = x
    x.right = t2

    update_height(x)
    update_height(y)

    return y

def insert(root, key):
    if not root:
        return AVLNode(key)

    if key < root.key:
        root.left = insert(root.left, key)
    else:
        root.right = insert(root.right, key)

    update_height(root)

    balance = get_balance_factor(root)

    if balance > 1:
        if key < root.left.key:
            return rotate_right(root)
        else:
            root.left = rotate_left(root.left)
            return rotate_right(root)

    if balance < -1:
        if key > root.right.key:
            return rotate_left(root)
        else:
            root.right = rotate_right(root.right)
            return rotate_left(root)

    return root

def avl_tree_sort(arr):
    root = None
    for item in arr:
        root = insert(root, item)

    sorted_arr = []

    def in_order_traversal(node):
        if node:
            in_order_traversal(node.left)
            sorted_arr.append(node.key)
            in_order_traversal(node.right)

    in_order_traversal(root)

    return sorted_arr

# Implementación de Bubble Sort
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

# Implementación de Merge Sort
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]

    left = merge_sort(left)
    right = merge_sort(right)

    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result.extend(left[i:])
    result.extend(right[j:])
    return result

# Implementación de Quick Sort
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        left = []
        right = []
        for x in arr[1:]:
            if x < pivot:
                left.append(x)
            else:
                right.append(x)
        return quick_sort(left) + [pivot] + quick_sort(right)



arr = [71,581,587, 254, 503, 818,237, 215, 122, 653, 774, 202, 890, 657, 109, 859, 305, 789, 141, 788,147, 598, 227, 133, 423, 947, 969, 27, 792, 572, 908, 339, 746, 243, 181, 279, 428, 96, 647, 545, 872, 174, 479, 934, 25,931, 922, 678, 110, 292, 617, 104, 741, 726, 823, 503, 736, 581, 63, 852, 470, 121, 419, 866, 283, 328, 336, 454,196, 461, 473, 77, 764, 612, 468, 855, 962, 798, 287, 25, 394, 204, 989, 293, 305, 361, 307, 154, 319, 803, 108, 538, 396, 227, 262, 949, 69, 123,18, 255, 979,493, 657,]

# Medir el tiempo de ejecución de Bubble Sort
print("BUBBLE SORT")
start_time = time.time()
sorted_bubble = bubble_sort(arr.copy())
bubble_sort_time = time.time() - start_time
print("Arreglo ordenado:", sorted_bubble)
print(f"Tiempo de ejecución de Bubble Sort: {bubble_sort_time} segundos")

# Medir el tiempo de ejecución de Merge Sort
print("MERGE SORT")
start_time = time.time()
sorted_merge = merge_sort(arr.copy())
merge_sort_time = time.time() - start_time
print("Arreglo ordenado:", sorted_merge)
print(f"Tiempo de ejecución de Merge Sort: {merge_sort_time} segundos")

# Medir el tiempo de ejecución de Quick Sort
print("QUICK SORT")
start_time = time.time()
sorted_quick = quick_sort(arr.copy())
quick_sort_time = time.time() - start_time
print("Arreglo ordenado:", sorted_quick)
print(f"Tiempo de ejecución de Quick Sort: {quick_sort_time} segundos")

# Medir el tiempo de ejecución de AVL Tree Sort
print("AVL TREE SORT")
start_time = time.time()
sorted_arr = avl_tree_sort(arr.copy())
avl_tree_sort_time = time.time() - start_time
print("Arreglo ordenado:", sorted_arr)
print(f"Tiempo de ejecución de AVL Tree Sort: {avl_tree_sort_time} segundos")
